#!/usr/bin/env python3
import os

import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from tkinter import filedialog as fd

import subprocess
import sys

from interactor import *

PACKAGE="media.tiger.tigerbox"

def clear_frame(container):
    for widget in container.winfo_children():
       widget.destroy()
    container.pack_forget()

def not_blank(value):
    return len(value) > 0

def device_list():
    global user_devices
    mapped = list(map((lambda var: var.get()), user_devices))
    return list(filter(not_blank, mapped))


def validate_then(fn):
    list = device_list()
    if (len(list) > 0):
        fn(list)

def wifi_password_clicked():
    try:
        password = os.environ['WIFI_PASSWORD']
        validate_then(lambda devices: device_type(devices, password))
    except KeyError as err:
        print("No password set")
        # tkinter.simpledialog.askstring("Password", "Type Wifi Password",password)

def get_wifi_credentials():
    wifi_list_location = os.environ['WIFI_INFO']

    with open(wifi_list_location, 'r') as file:
        data = file.read()
    return json.loads(data)

def get_user_credentials():
    user_location = os.environ['USER_INFO']
    with open(user_location, 'r') as file:
        data = file.read()
    user_list = json.loads(data)
    return user_list["login"]

def onboarding_flow():
    selected_network = get_wifi_credentials()["Home"]

    selected_user = get_user_credentials()[0]
    validate_then(lambda devices: device_onboarding_flow(devices,
                                                        selected_network["name"],
                                                        selected_network["password"],
                                                        selected_user["username"],
                                                        selected_user["password"]
                                                        ))

def zlocal_password_clicked():
    password = get_wifi_credentials()["Z Local"]["password"]
    validate_then(lambda devices: device_type(devices, password))

def find_file():
    filename = fd.askopenfilename()
    return filename

def zuhlke_hotspot_password_clicked():
    validate_then(lambda devices: device_type(devices, get_wifi_credentials()["Z Hotspot"]["password"]))
def quintin_hotspot_password_clicked():
    validate_then(lambda devices: device_type(devices, get_wifi_credentials()["Q Hotspot"]["password"]))
def app_clear_cache():
    validate_then(lambda devices: device_clear_cache(devices, PACKAGE))
def open_activity(name):
    validate_then(lambda devices: show_activity(devices, PACKAGE, name))
def open_main_activity():
    open_activity("ui.onboarding.OnboardingActivity")
def open_test_update_activity():
    open_activity("developer.TestHarnessUpdateActivity")
def open_test_download_activity():
    open_activity("developer.TestHarnessDownloadActivity")
def type_login_details_quintin():
    validate_then(lambda devices: device_enter_login_details(devices, get_user_credentials()[0]["username"], get_user_credentials()[0]["password"]))
def type_login_details_milan():
    validate_then(lambda devices: device_enter_login_details(devices, get_user_credentials()[1]["username"], get_user_credentials()[1]["password"]))
def tap_bottom_center_button():
    validate_then(lambda devices: device_tap(devices, 400, 450))
def set_device_screen_brightness(value):
    validate_then(lambda devices: device_screen_brightness(devices, value))
def set_device_screen_timeout(value):
    validate_then(lambda devices: device_screen_timeout(devices, value))
def display_version_info(title, info):
    validate_then(lambda devices: showTable(f"{title} - {PACKAGE}", device_get_info(devices, PACKAGE, info)))
def display_system_proprtyinfo(title, info):
    validate_then(lambda devices: showTable(f"{title} - {PACKAGE}", device_get_system_property_info(devices, info)))


def update(devices_list):
    file_name = find_file()
    device_update(devices_list, file_name)

def showTable(title, dictionary):
    # print(f"\n\TABLE RAW:\n\n{dictionary}\n\n")
    result=""
    for deviceId in dictionary:
        result = f"{result}\n{get_device_name(deviceId)} [{deviceId}]: [{dictionary[deviceId]}]\n"
    show(title, result)

def show(title, text):
    messagebox.showinfo(title, text)
    # print(f"\n\nRESULT:\n{text}")

def populate_devices_frame(container):
    global user_devices
    clear_frame(container)
    user_devices = []
    devices_list=subprocess.run(["adb","devices"], capture_output=True).stdout.decode().strip().split('\n', 1)[-1]
    if devices_list.splitlines()[0] != 'List of devices attached':
        current_row = 0
        for line in devices_list.splitlines():
            data = line.split("\t")
            selected_device = tk.StringVar()
            device_check = ttk.Checkbutton(
                container,
                text=f"{get_device_name(data[0])} [{data[1]}]",
                onvalue=data[0],
                offvalue="",
                variable=selected_device)
            user_devices.append(selected_device)
            device_check.pack(fill=tk.X, side=tk.TOP)
            current_row = current_row + 1

def create_button_frame(container):
    frame = ttk.Frame(container)
    frame.columnconfigure(0, weight=1)
    frame.columnconfigure(1, weight=3)
    frame.columnconfigure(1, weight=3)

    control_buttons = {
        "scrcpy": lambda: validate_then(device_scrcpy),
        "scrcpy rec": lambda: validate_then(device_record),
        "scrcpy kill": lambda: run_command(["pkill","scrcpy"]),
    }
    hardware_buttons = {
        "Unlock": lambda: validate_then(device_unlock),
        "Power": lambda: validate_then(device_power),
        "Reboot": lambda: validate_then(device_reboot),
        "Back": lambda: validate_then(device_back),
        "Home Button": lambda: validate_then(device_home),
    }
    property_buttons = {
        "No update": lambda: validate_then(device_app_no_update),
        "Clear Prop": lambda: validate_then(device_clear_qa_settings),
        "Onboarding": onboarding_flow,
    }
    wifi_buttons = {
        "Wifi P/W": wifi_password_clicked,
        "zLocal": zlocal_password_clicked,
        "Z H/S P/W": zuhlke_hotspot_password_clicked,
        "Q H/S P/W": quintin_hotspot_password_clicked,
    }
    login_buttons = {
        "Tap button": tap_bottom_center_button,
        "Q Login": type_login_details_quintin,
        "M Login": type_login_details_milan,
    }
    screen_buttons = {
        "Contrast Up": lambda: set_device_screen_brightness(100),
        "Contrast Dn": lambda: set_device_screen_brightness(1),
        "Dim 5  Min": lambda: set_device_screen_timeout(300000),
        "Dim 15 Sec": lambda: set_device_screen_timeout(15000),
        "Dim 5  Sec": lambda: set_device_screen_timeout(5000),
    }
    lifestyle_buttons = {
        "App Settings": lambda: validate_then(device_open_app_settings),
        "Sound low": lambda: validate_then(device_sound_down),
        "Settings": lambda: validate_then(lambda devices: device_open_screen(devices, "android.settings.SETTINGS")),
        "Lang EN": lambda: validate_then(lambda devices: device_set_language(devices, "en")),
        "Lang GB": lambda: validate_then(lambda devices: device_set_language(devices, "gb")),
    }
    info_buttons = {
        "VersionCode": lambda: display_version_info("Version Code", "versionCode"),
        "VersionName": lambda: display_version_info("Version Name", "versionName"),
        "F/W Version": lambda: display_system_proprtyinfo("App Firmware Version", "ro.build.display.id"),
        "Update": lambda: validate_then(lambda devices: update(devices)),
    }
    app_buttons = {
        "Main Screen": open_main_activity,
        "Update Test": open_test_update_activity,
        "D/L Test": open_test_download_activity,
        "Reset": app_clear_cache,
        "Reboot": lambda: validate_then(lambda devices: device_reboot(devices)),
    }

    current_column = 0
    all_controls = [control_buttons, lifestyle_buttons, property_buttons, wifi_buttons, login_buttons, hardware_buttons, screen_buttons, info_buttons, app_buttons]
    for button_list in all_controls:
        row = 0
        for text, event in button_list.items():
            ttk.Button(frame, text=text, command=event).grid(column=current_column, row=row, sticky='NWE')
            row = row + 1
        current_column = current_column + 1

    drop = OptionMenu( frame , clicked , *options )

    return frame

def create_left_frame(container):
    frame = ttk.Frame(container)
    ttk.Button(frame, text='Refresh', command=lambda:populate_devices_frame(devices_frame)).grid(row=0, column=0, columnspan=1, sticky='NW')
    devices_frame = ttk.Frame(frame)
    devices_frame.grid(row=1, column=0, columnspan=1, sticky='NW')
    populate_devices_frame(devices_frame)

    return frame

def create_main_window():
    # root window
    root = tk.Tk()
    root.title('ADB Controller')
    icon = tk.PhotoImage(file = 'android.png')
    root.iconphoto(False, icon)
    # root.geometry('500x500')
    root.columnconfigure(0, weight=1)
    root.columnconfigure(1, weight=3)

    left_frame = create_left_frame(root)
    left_frame.grid(row=0, column=0, sticky='NW')

    button_frame = create_button_frame(root)
    button_frame.grid(row=0, column=1)

    root.mainloop()

def __init__(self):
    self.user_devices = []

if __name__ == "__main__":
    create_main_window()
